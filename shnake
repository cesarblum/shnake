#!/bin/bash

# shnake - classic snake game in bash.
#
# Copyright (c) 2011 Cesar L. B. Silveira
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Move command codes
up=1
down=2
right=3
left=4

# Terminal size
cols=$(tput cols)
lines=$(tput lines)

# Game area limits
min_x=4
max_x=$((cols - 4))
min_y=4
max_y=$((lines - 4))

# State data
running=1
direction=$right
size=5

# The snake itself, and the food "object"
declare -a snake_x
declare -a snake_y
declare -a food

function graphicsmode {
    echo -e '\033(0'
}

function textmode {
    echo -e '\033(1'
}

function saveterm {
    term_settings=$(stty -g)
}

function restoreterm {
    stty $term_settings
}

# Echo data on given screen coordinates
function echoxy {
    echo -e '\033['$2';'$1'H'$3
}

# Draw the game area border
function drawborder {
    x0=$1
    y0=$2
    x1=$3
    y1=$4

    graphicsmode

    echoxy $x0 $y0 l
    echoxy $x0 $y1 m
    echoxy $x1 $y0 k
    echoxy $x1 $y1 j

    for x in $(seq $((x0 + 1)) $((x1 - 1))); do
        echoxy $x $y0 q
        echoxy $x $y1 q
    done

    for y in $(seq $((y0 + 1)) $((y1 - 1))); do
        echoxy $x0 $y x
        echoxy $x1 $y x
    done

    textmode
}

# Move the snake one tile on the game area and grow it if necessary, or die
# on collision with game area border.
function updatesnake {
    tail_x=${snake_x[$(($size - 1))]}
    tail_y=${snake_y[$(($size - 1))]}

    echoxy ${snake_x[$(($size - 1))]} ${snake_y[$(($size - 1))]} '\040'

    for i in $(seq $((size - 1)) 1); do
        snake_x[$i]=${snake_x[$i-1]}
        snake_y[$i]=${snake_y[$i-1]}
    done

    case $direction in
        $up)
            snake_y[0]=$((${snake_y[0]} - 1)) ;;
        $right)
            snake_x[0]=$((${snake_x[0]} + 1)) ;;
        $down)
            snake_y[0]=$((${snake_y[0]} + 1)) ;;
        $left)
            snake_x[0]=$((${snake_x[0]} - 1)) ;;
    esac

    graphicsmode

    echoxy ${snake_x[0]} ${snake_y[0]} a

    if [ ${snake_x[0]} -eq ${food[0]} -a ${snake_y[0]} -eq ${food[1]} ]; then
        snake_x[$size]=$tail_x
        snake_y[$size]=$tail_y
        echoxy ${snake_x[$size]} ${snake_y[$size]} a
        size=$(($size+1))
        putfood
    elif [ ${snake_x[0]} -eq $min_x -o ${snake_x[0]} -eq $max_x -o \
           ${snake_y[0]} -eq $min_y -o ${snake_y[0]} -eq $max_y ]; then
        running=0
    fi

    textmode
}

# Place the food at some random position on the game area
function putfood {
    retry=1

    while [ ! $retry -eq 0 ]; do
        food[0]=$((1 + $min_x + ($RANDOM % ($max_x - $min_x - 1))))
        food[1]=$((1 + $min_y + ($RANDOM % ($max_y - $min_y - 1))))

        retry=0

        for i in $(seq 0 $((size - 1))); do
            if [ ${food[0]} -eq ${snake_x[i]} -a ${food[1]} -eq ${snake_y[i]} ]
            then
                retry=1
                break
            fi
        done
    done

    echoxy ${food[0]} ${food[1]} '*'
}

# Initialize the snake
function initsnake {
    for i in $(seq $((size - 1)) 0); do
        snake_x[$i]=$(($min_x + 4 + (size - 1 - i)))
        snake_y[$i]=$(($min_y + (($max_y - $min_y) / 2)))
    done
}

# Draw the snake
function putsnake {
    graphicsmode

    for i in $(seq 0 $((size - 1))); do
        echoxy ${snake_x[$i]} ${snake_y[$i]} a
    done

    textmode
}

# "Main"
clear
drawborder $min_x $min_y $max_x $max_y

# Store terminal settings
saveterm

# This is what allows the script to detect keystrokes
# without requiring the user to press the Enter key
stty -icanon min 0 time 0 -echo

# Initialize
initsnake
putsnake
putfood

# Game loop
while(($running)); do
    read key

    case $key in
        w)
            if [ $direction -eq $left -o $direction -eq $right ]; then
                direction=$up
            fi
            ;;
        a)
            if [ $direction -eq $up -o $direction -eq $down ]; then
                direction=$left
            fi
            ;;
        s)
            if [ $direction -eq $left -o $direction -eq $right ]; then
                direction=$down
            fi
            ;;
        d)
            if [ $direction -eq $up -o $direction -eq $down ]; then
                direction=$right
            fi
            ;;
        q) running=0 ;;
    esac

    updatesnake
    sleep 0.1
done

# Restore terminal settings
restoreterm
